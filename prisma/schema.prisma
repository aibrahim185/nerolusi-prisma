// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    UserAnswer UserAnswer[]

    UsersToClass UsersToClass[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Class {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  Packages  Package[]
  Users     UsersToClass[]
}

enum Type {
  tryout
  drill
}

model Package {
  id        Int      @id @default(autoincrement())
  name      String
  type      Type
  TOstart   DateTime?
  TOend     DateTime?
  TOduration String?
  classId   Int
  Class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  Questions Question[]
}

enum Subtest {
  pu
  ppu
  pbm
  pk
  lb
  pm
}

enum QuestionType {
  essay
  mulChoice
}

model Question {
  id             String      @id @default(uuid())
  index          Int
  content        String
  imageUrl       String?
  subtest        Subtest
  type           QuestionType
  score          Int         @default(0)
  explanation    String?
  correctAnswerId String?     @map("correct_answer")
  createdAt      DateTime    @default(now())
  packageId      Int
  Package        Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  Answers        Answer[]    @relation("QuestionAnswers")
  CorrectAnswer  Answer?     @relation("QuestionCorrectAnswer")
}

model Answer {
  id         String   @id @default(uuid())
  index      Int
  content    String
  questionId String @unique
  Question   Question @relation("QuestionAnswers", fields: [questionId], references: [id], onDelete: Cascade)
  QuestionAns   Question @relation("QuestionCorrectAnswer", fields: [questionId], references: [id], onDelete: Cascade, map: "QuestionCorrectAnswer_questionId_fkey")

  UserAnswer UserAnswer[]
}

model UserAnswer {
  userId    String
  answerId  String
  answer    String
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Answer    Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  @@id([userId, answerId])
}

model Video {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  url         String
  createdAt   DateTime  @default(now())
}

model File {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  url         String
}

model UsersToClass {
  userId  String
  classId Int
  User    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Class   Class?  @relation(fields: [classId], references: [id], onDelete: Cascade)
  @@id([userId, classId])
}