generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  user
  teacher
  admin
}

enum Type {
  tryout
  drill
}

enum Subtest {
  pu
  ppu
  pbm
  pk
  lb
  pm
}

enum QuestionType {
  essay
  mulChoice
}

// Models
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(user)
  createdAt     DateTime       @default(now())
  accounts      Account[]
  sessions      Session[]
  userAnswers   UserAnswer[]
  usersToClasses UsersToClass[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Class {
  id        Int           @id @default(autoincrement())
  name      String
  createdAt DateTime       @default(now())
  packages  Package[]
  usersToClasses UsersToClass[]
}

model Package {
  id          Int        @id @default(autoincrement())
  name        String
  type        Type
  TOstart     DateTime?
  TOend       DateTime?
  TOduration  String?
  classId     Int
  class       Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  questions   Question[]
}

model Question {
  id             String         @id @default(uuid())
  index          Int
  content        String
  imageUrl       String?
  subtest        Subtest
  type           QuestionType
  score          Int            @default(0)
  explanation    String?
  correctAnswerId String?
  createdAt      DateTime        @default(now())
  packageId      Int
  package        Package         @relation(fields: [packageId], references: [id], onDelete: Cascade)
  answers        Answer[]        @relation("QuestionAnswers")
  correctAnswer  Answer?         @relation("QuestionCorrectAnswer", fields: [correctAnswerId], references: [id])
}

model Answer {
  id           String       @id @default(uuid())
  index        Int
  content      String
  questionId   String
  question     Question     @relation("QuestionAnswers", fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers  UserAnswer[]

  Question Question[] @relation("QuestionCorrectAnswer")
}

model UserAnswer {
  userId    String
  answerId  String
  answer    String
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  answerRef Answer? @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@id([userId, answerId])
}

model Video {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  url         String
  createdAt   DateTime  @default(now())
}

model File {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  url         String
}

model UsersToClass {
  userId  String
  classId Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@id([userId, classId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
